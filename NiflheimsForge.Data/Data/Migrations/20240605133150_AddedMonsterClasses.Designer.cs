// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NiflheimsForge.Data;

#nullable disable

namespace NiflheimsForge.Data.Data.Migrations
{
    [DbContext(typeof(NiflheimsForgeDBContext))]
    [Migration("20240605133150_AddedMonsterClasses")]
    partial class AddedMonsterClasses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NiflheimsForge.Core.Models.City", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NiflheimsForge.Core.Models.Country", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttackBonus")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "attack_bonus");

                    b.Property<int>("DcId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("MultiattackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "multiattack_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("UsageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DcId");

                    b.HasIndex("MonsterId");

                    b.HasIndex("UsageId");

                    b.ToTable("Action");

                    b.HasAnnotation("Relational:JsonPropertyName", "actions");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.ActionReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "action_name");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("ActionReference");

                    b.HasAnnotation("Relational:JsonPropertyName", "actions");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.ArmorClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("ArmorClass");

                    b.HasAnnotation("Relational:JsonPropertyName", "armor_class");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Damage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("DamageDice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "damage_dice");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LegendaryActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("LegendaryActionId");

                    b.ToTable("Damage");

                    b.HasAnnotation("Relational:JsonPropertyName", "damage");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.DamageTypeReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.ToTable("DamageTypeReference");

                    b.HasAnnotation("Relational:JsonPropertyName", "dc_type");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Dc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DcTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DcValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "dc_value");

                    b.Property<string>("SuccessType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "success_type");

                    b.HasKey("Id");

                    b.HasIndex("DcTypeId");

                    b.ToTable("Dc");

                    b.HasAnnotation("Relational:JsonPropertyName", "dc");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.LegendaryAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DcId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("DcId");

                    b.HasIndex("MonsterId");

                    b.ToTable("LegendaryAction");

                    b.HasAnnotation("Relational:JsonPropertyName", "legendary_actions");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "alignment");

                    b.Property<double>("ChallengeRating")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "challenge_rating");

                    b.Property<int>("Charisma")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "charisma");

                    b.Property<int>("Constitution")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "constitution");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DamageImmunities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "damage_immunities");

                    b.Property<string>("DamageResistances")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "damage_resistances");

                    b.Property<string>("DamageVulnerabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "damage_vulnerabilities");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "dexterity");

                    b.Property<string>("HitDice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hit_dice");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "hit_points");

                    b.Property<string>("HitPointsRoll")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hit_points_roll");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "image");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "index");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "intelligence");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "languages");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "proficiency_bonus");

                    b.Property<int>("SensesId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<int>("SpeedId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "strength");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "wisdom");

                    b.Property<int>("Xp")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "xp");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("SensesId");

                    b.HasIndex("SpeedId");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Proficiencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.HasIndex("ProficiencyId");

                    b.ToTable("Proficiencies");

                    b.HasAnnotation("Relational:JsonPropertyName", "proficiencies");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.ProficiencyReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "index");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("ProficiencyReference");

                    b.HasAnnotation("Relational:JsonPropertyName", "proficiency");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Senses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Blindsight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "blindsight");

                    b.Property<string>("Darkvision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "darkvision");

                    b.Property<int>("PassivePerception")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "passive_perception");

                    b.HasKey("Id");

                    b.ToTable("Senses");

                    b.HasAnnotation("Relational:JsonPropertyName", "senses");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.SpecialAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "desc");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("UsageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.HasIndex("UsageId");

                    b.ToTable("SpecialAbility");

                    b.HasAnnotation("Relational:JsonPropertyName", "special_abilities");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Speed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fly");

                    b.Property<string>("Swim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "swim");

                    b.Property<string>("Walk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "walk");

                    b.HasKey("Id");

                    b.ToTable("Speed");

                    b.HasAnnotation("Relational:JsonPropertyName", "speed");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Usage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "dice");

                    b.Property<int>("MinValue")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "min_value");

                    b.Property<string>("RestTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "rest_types");

                    b.Property<int>("Times")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "times");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.ToTable("Usage");

                    b.HasAnnotation("Relational:JsonPropertyName", "usage");
                });

            modelBuilder.Entity("NiflheimsForge.Core.Models.City", b =>
                {
                    b.HasOne("NiflheimsForge.Core.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Action", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Dc", "Dc")
                        .WithMany()
                        .HasForeignKey("DcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NiflheimsForge.Data.Models.Monster", null)
                        .WithMany("Actions")
                        .HasForeignKey("MonsterId");

                    b.HasOne("NiflheimsForge.Data.Models.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dc");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.ActionReference", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Action", null)
                        .WithMany("Actions")
                        .HasForeignKey("ActionId");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.ArmorClass", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Monster", null)
                        .WithMany("ArmorClass")
                        .HasForeignKey("MonsterId");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Damage", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Action", null)
                        .WithMany("Damage")
                        .HasForeignKey("ActionId");

                    b.HasOne("NiflheimsForge.Data.Models.DamageTypeReference", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NiflheimsForge.Data.Models.LegendaryAction", null)
                        .WithMany("Damage")
                        .HasForeignKey("LegendaryActionId");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Dc", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.DamageTypeReference", "DcType")
                        .WithMany()
                        .HasForeignKey("DcTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DcType");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.LegendaryAction", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Dc", "Dc")
                        .WithMany()
                        .HasForeignKey("DcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NiflheimsForge.Data.Models.Monster", null)
                        .WithMany("LegendaryActions")
                        .HasForeignKey("MonsterId");

                    b.Navigation("Dc");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Monster", b =>
                {
                    b.HasOne("NiflheimsForge.Core.Models.Country", null)
                        .WithMany("Monsters")
                        .HasForeignKey("CountryId");

                    b.HasOne("NiflheimsForge.Data.Models.Senses", "Senses")
                        .WithMany()
                        .HasForeignKey("SensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NiflheimsForge.Data.Models.Speed", "Speed")
                        .WithMany()
                        .HasForeignKey("SpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Senses");

                    b.Navigation("Speed");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Proficiencies", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Monster", null)
                        .WithMany("Proficiencies")
                        .HasForeignKey("MonsterId");

                    b.HasOne("NiflheimsForge.Data.Models.ProficiencyReference", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.ProficiencyReference", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Monster", null)
                        .WithMany("ConditionImmunities")
                        .HasForeignKey("MonsterId");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.SpecialAbility", b =>
                {
                    b.HasOne("NiflheimsForge.Data.Models.Monster", null)
                        .WithMany("SpecialAbilities")
                        .HasForeignKey("MonsterId");

                    b.HasOne("NiflheimsForge.Data.Models.Usage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("NiflheimsForge.Core.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Monsters");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Action", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Damage");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.LegendaryAction", b =>
                {
                    b.Navigation("Damage");
                });

            modelBuilder.Entity("NiflheimsForge.Data.Models.Monster", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ArmorClass");

                    b.Navigation("ConditionImmunities");

                    b.Navigation("LegendaryActions");

                    b.Navigation("Proficiencies");

                    b.Navigation("SpecialAbilities");
                });
#pragma warning restore 612, 618
        }
    }
}
